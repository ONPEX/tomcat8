Description: Modifies the tests to compile and run with the versions of JUnit,
 Hamcrest and EasyMock available in Wheezy
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: not-needed
--- a/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
+++ b/test/org/apache/tomcat/websocket/TestWsWebSocketContainer.java
@@ -389,9 +389,7 @@
             throws Exception {
 
         // This will never work for BIO
-        Assume.assumeFalse(
-                "Skipping test. This feature will never work for BIO connector.",
-                getProtocol().equals(Http11Protocol.class.getName()));
+        Assume.assumeTrue(!getProtocol().equals(Http11Protocol.class.getName()));
 
         /*
          * Note: There are all sorts of horrible uses of statics in this test
--- a/test/org/apache/tomcat/util/net/TestClientCert.java
+++ b/test/org/apache/tomcat/util/net/TestClientCert.java
@@ -46,7 +46,7 @@
     }
 
     private void doTestClientCertGet(boolean preemtive) throws Exception {
-        Assume.assumeTrue("SSL renegotiation has to be supported for this test",
+        Assume.assumeTrue(/*"SSL renegotiation has to be supported for this test",*/
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
         if (preemtive) {
@@ -96,7 +96,7 @@
 
     private void doTestClientCertPost(int bodySize, boolean expectProtectedFail)
             throws Exception {
-        Assume.assumeTrue("SSL renegotiation has to be supported for this test",
+        Assume.assumeTrue(/*"SSL renegotiation has to be supported for this test",*/
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
         getTomcatInstance().start();
--- a/test/org/apache/tomcat/util/net/TestCustomSsl.java
+++ b/test/org/apache/tomcat/util/net/TestCustomSsl.java
@@ -53,8 +53,8 @@
         Tomcat tomcat = getTomcatInstance();
         Connector connector = tomcat.getConnector();
 
-        Assume.assumeFalse("This test is only for JSSE based SSL connectors",
-                connector.getProtocolHandlerClassName().contains("Apr"));
+        Assume.assumeTrue(/*"This test is only for JSSE based SSL connectors",*/
+                !connector.getProtocolHandlerClassName().contains("Apr"));
 
         connector.setProperty("sslImplementationName",
                 "org.apache.tomcat.util.net.jsse.TesterBug50640SslImpl");
@@ -97,7 +97,7 @@
 
         Tomcat tomcat = getTomcatInstance();
 
-        Assume.assumeTrue("SSL renegotiation has to be supported for this test",
+        Assume.assumeTrue(/*"SSL renegotiation has to be supported for this test",*/
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
         TesterSupport.configureClientCertContext(tomcat);
--- a/test/org/apache/tomcat/util/net/TestSsl.java
+++ b/test/org/apache/tomcat/util/net/TestSsl.java
@@ -94,7 +94,7 @@
     public void testRenegotiateWorks() throws Exception {
         Tomcat tomcat = getTomcatInstance();
 
-        Assume.assumeTrue("SSL renegotiation has to be supported for this test",
+        Assume.assumeTrue(/*"SSL renegotiation has to be supported for this test",*/
                 TesterSupport.isRenegotiationSupported(getTomcatInstance()));
 
         Context root = tomcat.addContext("", TEMP_DIR);
--- a/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
+++ b/test/org/apache/tomcat/websocket/TestWebSocketFrameClientSSL.java
@@ -95,9 +95,9 @@
     public void testBug56032() throws Exception {
         // TODO Investigate options to get this test to pass with the HTTP BIO
         //      connector.
-        Assume.assumeFalse(
-                "Skip this test on BIO. TODO: investigate options to make it pass with HTTP BIO connector",
-                getTomcatInstance().getConnector().getProtocol()
+        Assume.assumeTrue(
+                //"Skip this test on BIO. TODO: investigate options to make it pass with HTTP BIO connector",
+                !getTomcatInstance().getConnector().getProtocol()
                         .equals("org.apache.coyote.http11.Http11Protocol"));
 
         Tomcat tomcat = getTomcatInstance();
--- a/test/org/apache/catalina/comet/TestCometProcessor.java
+++ b/test/org/apache/catalina/comet/TestCometProcessor.java
@@ -53,7 +53,7 @@
     @Test
     public void testAsyncClose() throws Exception {
         Assume.assumeTrue(
-                "This test is skipped, because this connector does not support Comet.",
+                //"This test is skipped, because this connector does not support Comet.",
                 isCometSupported());
 
         // Setup Tomcat instance
@@ -120,7 +120,7 @@
     @Test
     public void testSyncClose() throws Exception {
         Assume.assumeTrue(
-                "This test is skipped, because this connector does not support Comet.",
+                //"This test is skipped, because this connector does not support Comet.",
                 isCometSupported());
 
         // Setup Tomcat instance
@@ -192,7 +192,7 @@
     @Ignore("fails consistently on Debian/Linux")
     public void testConnectionClose() throws Exception {
         Assume.assumeTrue(
-                "This test is skipped, because this connector does not support Comet.",
+                //"This test is skipped, because this connector does not support Comet.",
                 isCometSupported());
 
         // Setup Tomcat instance
@@ -265,7 +265,7 @@
 
     private void doSimpleCometTest(String initParam) throws Exception {
         Assume.assumeTrue(
-                "This test is skipped, because this connector does not support Comet.",
+                //"This test is skipped, because this connector does not support Comet.",
                 isCometSupported());
 
         // Setup Tomcat instance
@@ -359,7 +359,7 @@
     @Test
     public void testCometConnectorStop() throws Exception {
         Assume.assumeTrue(
-                "This test is skipped, because this connector does not support Comet.",
+                //"This test is skipped, because this connector does not support Comet.",
                 isCometSupported());
 
         // Setup Tomcat instance
--- a/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
+++ b/test/org/apache/catalina/nonblocking/TestNonBlockingAPI.java
@@ -92,9 +92,9 @@
     public void testNonBlockingReadIgnoreIsReady() throws Exception {
         // TODO Investigate options to get this test to pass with the HTTP BIO
         //      connector.
-        Assume.assumeFalse(
-                "Skipping as this test requires true non-blocking IO",
-                getTomcatInstance().getConnector().getProtocol()
+        Assume.assumeTrue(
+                //"Skipping as this test requires true non-blocking IO",
+                !getTomcatInstance().getConnector().getProtocol()
                         .equals("org.apache.coyote.http11.Http11Protocol"));
         doTestNonBlockingRead(true);
     }
--- a/test/org/apache/catalina/startup/TestWebappServiceLoader.java
+++ b/test/org/apache/catalina/startup/TestWebappServiceLoader.java
@@ -42,7 +42,7 @@
     private ClassLoader parent;
     private ServletContext context;
     private WebappServiceLoader<ServletContainerInitializer> loader;
-
+/*
     @Before
     public void init() {
         control = EasyMock.createStrictControl();
@@ -173,4 +173,5 @@
             control.verify();
         }
     }
+*/
 }
